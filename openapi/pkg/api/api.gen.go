//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Id User ID
	Id string `json:"id"`

	// Password Password (plain text for login, but should be hashed in DB)
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Token Authentication token (e.g., JWT)
	Token *string `json:"token,omitempty"`
}

// QRScanRequest defines model for QRScanRequest.
type QRScanRequest struct {
	// QrData Scanned QR code data
	QrData string `json:"qr_data"`

	// ScheduleId ID of the schedule the QR relates to
	ScheduleId int `json:"schedule_id"`
}

// QRStreamRequest defines model for QRStreamRequest.
type QRStreamRequest struct {
	// ScheduleId ID of the schedule to stream QR codes for
	ScheduleId int `json:"schedule_id"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	GroupId   *string    `json:"group_id,omitempty"`
	Id        *int       `json:"id,omitempty"`
	RoomId    *string    `json:"room_id,omitempty"`
	SubjectId *string    `json:"subject_id,omitempty"`
	TeacherId *string    `json:"teacher_id,omitempty"`
	Time      *time.Time `json:"time,omitempty"`
}

// PostStudentLoginJSONRequestBody defines body for PostStudentLogin for application/json ContentType.
type PostStudentLoginJSONRequestBody = LoginRequest

// PostStudentScanJSONRequestBody defines body for PostStudentScan for application/json ContentType.
type PostStudentScanJSONRequestBody = QRScanRequest

// PostTeacherLoginJSONRequestBody defines body for PostTeacherLogin for application/json ContentType.
type PostTeacherLoginJSONRequestBody = LoginRequest

// PostTeacherQrStreamJSONRequestBody defines body for PostTeacherQrStream for application/json ContentType.
type PostTeacherQrStreamJSONRequestBody = QRStreamRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Student login
	// (POST /student/login)
	PostStudentLogin(w http.ResponseWriter, r *http.Request)
	// Scan and send QR codes for student
	// (POST /student/scan)
	PostStudentScan(w http.ResponseWriter, r *http.Request)
	// Get student schedule
	// (GET /student/schedule)
	GetStudentSchedule(w http.ResponseWriter, r *http.Request)
	// Teacher login
	// (POST /teacher/login)
	PostTeacherLogin(w http.ResponseWriter, r *http.Request)
	// Stream QR codes for teacher
	// (POST /teacher/qr-stream)
	PostTeacherQrStream(w http.ResponseWriter, r *http.Request)
	// Get teacher schedule
	// (GET /teacher/schedule)
	GetTeacherSchedule(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostStudentLogin operation middleware
func (siw *ServerInterfaceWrapper) PostStudentLogin(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStudentLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostStudentScan operation middleware
func (siw *ServerInterfaceWrapper) PostStudentScan(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStudentScan(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStudentSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetStudentSchedule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStudentSchedule(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeacherLogin operation middleware
func (siw *ServerInterfaceWrapper) PostTeacherLogin(w http.ResponseWriter, r *http.Request) {
	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeacherLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTeacherQrStream operation middleware
func (siw *ServerInterfaceWrapper) PostTeacherQrStream(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTeacherQrStream(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTeacherSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetTeacherSchedule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTeacherSchedule(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/student/login", wrapper.PostStudentLogin)
	m.HandleFunc("POST "+options.BaseURL+"/student/scan", wrapper.PostStudentScan)
	m.HandleFunc("GET "+options.BaseURL+"/student/schedule", wrapper.GetStudentSchedule)
	m.HandleFunc("POST "+options.BaseURL+"/teacher/login", wrapper.PostTeacherLogin)
	m.HandleFunc("POST "+options.BaseURL+"/teacher/qr-stream", wrapper.PostTeacherQrStream)
	m.HandleFunc("GET "+options.BaseURL+"/teacher/schedule", wrapper.GetTeacherSchedule)

	return m
}

type PostStudentLoginRequestObject struct {
	Body *PostStudentLoginJSONRequestBody
}

type PostStudentLoginResponseObject interface {
	VisitPostStudentLoginResponse(w http.ResponseWriter) error
}

type PostStudentLogin200JSONResponse LoginResponse

func (response PostStudentLogin200JSONResponse) VisitPostStudentLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentLogin401JSONResponse ErrorResponse

func (response PostStudentLogin401JSONResponse) VisitPostStudentLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentLogin500JSONResponse ErrorResponse

func (response PostStudentLogin500JSONResponse) VisitPostStudentLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentScanRequestObject struct {
	Body *PostStudentScanJSONRequestBody
}

type PostStudentScanResponseObject interface {
	VisitPostStudentScanResponse(w http.ResponseWriter) error
}

type PostStudentScan200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostStudentScan200JSONResponse) VisitPostStudentScanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentScan401JSONResponse ErrorResponse

func (response PostStudentScan401JSONResponse) VisitPostStudentScanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentScan500JSONResponse ErrorResponse

func (response PostStudentScan500JSONResponse) VisitPostStudentScanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentScheduleRequestObject struct{}

type GetStudentScheduleResponseObject interface {
	VisitGetStudentScheduleResponse(w http.ResponseWriter) error
}

type GetStudentSchedule200JSONResponse []Schedule

func (response GetStudentSchedule200JSONResponse) VisitGetStudentScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentSchedule401JSONResponse ErrorResponse

func (response GetStudentSchedule401JSONResponse) VisitGetStudentScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStudentSchedule500JSONResponse ErrorResponse

func (response GetStudentSchedule500JSONResponse) VisitGetStudentScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTeacherLoginRequestObject struct {
	Body *PostTeacherLoginJSONRequestBody
}

type PostTeacherLoginResponseObject interface {
	VisitPostTeacherLoginResponse(w http.ResponseWriter) error
}

type PostTeacherLogin200JSONResponse LoginResponse

func (response PostTeacherLogin200JSONResponse) VisitPostTeacherLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTeacherLogin401JSONResponse ErrorResponse

func (response PostTeacherLogin401JSONResponse) VisitPostTeacherLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTeacherLogin500JSONResponse ErrorResponse

func (response PostTeacherLogin500JSONResponse) VisitPostTeacherLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTeacherQrStreamRequestObject struct {
	Body *PostTeacherQrStreamJSONRequestBody
}

type PostTeacherQrStreamResponseObject interface {
	VisitPostTeacherQrStreamResponse(w http.ResponseWriter) error
}

type PostTeacherQrStream200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response PostTeacherQrStream200TexteventStreamResponse) VisitPostTeacherQrStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostTeacherQrStream401JSONResponse ErrorResponse

func (response PostTeacherQrStream401JSONResponse) VisitPostTeacherQrStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTeacherQrStream500JSONResponse ErrorResponse

func (response PostTeacherQrStream500JSONResponse) VisitPostTeacherQrStreamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTeacherScheduleRequestObject struct{}

type GetTeacherScheduleResponseObject interface {
	VisitGetTeacherScheduleResponse(w http.ResponseWriter) error
}

type GetTeacherSchedule200JSONResponse []Schedule

func (response GetTeacherSchedule200JSONResponse) VisitGetTeacherScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeacherSchedule401JSONResponse ErrorResponse

func (response GetTeacherSchedule401JSONResponse) VisitGetTeacherScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTeacherSchedule500JSONResponse ErrorResponse

func (response GetTeacherSchedule500JSONResponse) VisitGetTeacherScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Student login
	// (POST /student/login)
	PostStudentLogin(ctx context.Context, request PostStudentLoginRequestObject) (PostStudentLoginResponseObject, error)
	// Scan and send QR codes for student
	// (POST /student/scan)
	PostStudentScan(ctx context.Context, request PostStudentScanRequestObject) (PostStudentScanResponseObject, error)
	// Get student schedule
	// (GET /student/schedule)
	GetStudentSchedule(ctx context.Context, request GetStudentScheduleRequestObject) (GetStudentScheduleResponseObject, error)
	// Teacher login
	// (POST /teacher/login)
	PostTeacherLogin(ctx context.Context, request PostTeacherLoginRequestObject) (PostTeacherLoginResponseObject, error)
	// Stream QR codes for teacher
	// (POST /teacher/qr-stream)
	PostTeacherQrStream(ctx context.Context, request PostTeacherQrStreamRequestObject) (PostTeacherQrStreamResponseObject, error)
	// Get teacher schedule
	// (GET /teacher/schedule)
	GetTeacherSchedule(ctx context.Context, request GetTeacherScheduleRequestObject) (GetTeacherScheduleResponseObject, error)
}

type (
	StrictHandlerFunc    = strictnethttp.StrictHTTPHandlerFunc
	StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc
)

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostStudentLogin operation middleware
func (sh *strictHandler) PostStudentLogin(w http.ResponseWriter, r *http.Request) {
	var request PostStudentLoginRequestObject

	var body PostStudentLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostStudentLogin(ctx, request.(PostStudentLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStudentLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostStudentLoginResponseObject); ok {
		if err := validResponse.VisitPostStudentLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostStudentScan operation middleware
func (sh *strictHandler) PostStudentScan(w http.ResponseWriter, r *http.Request) {
	var request PostStudentScanRequestObject

	var body PostStudentScanJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostStudentScan(ctx, request.(PostStudentScanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStudentScan")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostStudentScanResponseObject); ok {
		if err := validResponse.VisitPostStudentScanResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStudentSchedule operation middleware
func (sh *strictHandler) GetStudentSchedule(w http.ResponseWriter, r *http.Request) {
	var request GetStudentScheduleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStudentSchedule(ctx, request.(GetStudentScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStudentSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStudentScheduleResponseObject); ok {
		if err := validResponse.VisitGetStudentScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTeacherLogin operation middleware
func (sh *strictHandler) PostTeacherLogin(w http.ResponseWriter, r *http.Request) {
	var request PostTeacherLoginRequestObject

	var body PostTeacherLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTeacherLogin(ctx, request.(PostTeacherLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTeacherLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTeacherLoginResponseObject); ok {
		if err := validResponse.VisitPostTeacherLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTeacherQrStream operation middleware
func (sh *strictHandler) PostTeacherQrStream(w http.ResponseWriter, r *http.Request) {
	var request PostTeacherQrStreamRequestObject

	var body PostTeacherQrStreamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTeacherQrStream(ctx, request.(PostTeacherQrStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTeacherQrStream")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTeacherQrStreamResponseObject); ok {
		if err := validResponse.VisitPostTeacherQrStreamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTeacherSchedule operation middleware
func (sh *strictHandler) GetTeacherSchedule(w http.ResponseWriter, r *http.Request) {
	var request GetTeacherScheduleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeacherSchedule(ctx, request.(GetTeacherScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeacherSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTeacherScheduleResponseObject); ok {
		if err := validResponse.VisitGetTeacherScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
